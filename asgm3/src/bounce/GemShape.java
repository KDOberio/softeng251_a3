package bounce;

public class GemShape extends Shape {
	// Defines a data structure for accessing coordinates. Used for defining
	// vertices.
	private class Coordinate {
		public int _x;
		public int _y;
		
		public Coordinate (int x, int y) {
			_x = x;
			_y = y;
		}
		
	}
	
	// A bunch of constants that may be annoying to change if not implemented as
	// symbolic constants.
	private static final int SMALL_SIZE = 40;
	private static final int DISTANCE_FROM_SIDE = 20;
	private static final int NUM_SIDES = 6;
	
	private Coordinate[] _vertices;
	public GemShape() {
		super();
	}
	
	public GemShape(int x, int y, int deltaX, int deltaY) {
		super(x, y, deltaX, deltaY);
	}
	
	/**
	 * Creates a gem shape with either six sides or four sides, depending on width.
	 * @param x Starting x-coordinate that this shape appears in.
	 * @param y Starting y-coordinate that this shape appears in.
	 * @param deltaX Velocity of shape in x-direction.
	 * @param deltaY Velocity of shape in y-direction.
	 * @param width Width of shape. If <40, gem is four-sided, otherwise is six-sided.
	 * @param height Height of shape.
	 */
	public GemShape(int x, int y, int deltaX, int deltaY, int width, int height) {
		super(x, y, deltaX, deltaY, width, height);
	}

	// The lines are generated by first finding the vertices of the gem shape, and
	// then running a for loop to draw lines between all these vertices.
	@Override
	protected void draw(Painter painter) {
		
		_vertices = new Coordinate[NUM_SIDES];
		
		// If requirements about shape change, change it here only.
		if (_width < SMALL_SIZE) {
			_vertices[0] = new Coordinate(_x + (_width / 2), _y);
			_vertices[1] = new Coordinate(_x + (_width / 2), _y);
			_vertices[2] = new Coordinate(_x + _width, _y + (_height / 2));
			_vertices[3] = new Coordinate(_x + (_width / 2), _y + _height);
			_vertices[4] = new Coordinate(_x + (_width / 2), _y + _height);
			_vertices[5] = new Coordinate(_x, _y + (_height / 2));
		} else {
			_vertices[0] = new Coordinate(_x + DISTANCE_FROM_SIDE, _y);
			_vertices[1] = new Coordinate(_x + _width - DISTANCE_FROM_SIDE, _y);
			_vertices[2] = new Coordinate(_x + _width, _y + (_height / 2));
			_vertices[3] = new Coordinate(_x + _width - DISTANCE_FROM_SIDE, _y + _height);
			_vertices[4] = new Coordinate(_x + DISTANCE_FROM_SIDE, _y + _height);
			_vertices[5] = new Coordinate(_x, _y + (_height / 2));
		}
		
		// Goes from each vertex and draws lines between them.
		for (int i = 0; i < NUM_SIDES; i++) {
			if (i == NUM_SIDES - 1) {
				painter.drawLine(_vertices[i]._x, _vertices[i]._y, _vertices[0]._x, _vertices[0]._y);
			} else {
				painter.drawLine(_vertices[i]._x, _vertices[i]._y, _vertices[i + 1]._x, _vertices[i + 1]._y);
			}
		}

	}

}
